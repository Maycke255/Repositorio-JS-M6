/* Promises funcionam como uma API rodando em segundo plano, ela serve para n√£o travar a aplica√ß√£o enquanto roda uma aplica√ß√£o muito pesada,
como buscar dados no servidor e trazer para o usuario e equanto faz isso o usuario pode rodar o resto da aplica√ß√£o sem travar, e no final ter
seu resultado de volta, ex:

Imagine que seu programa precise:
Buscar dados em um banco de dados üóÑÔ∏è
Chamar uma API (clima, CEP, produtos, etc.) üåê
Ler/escrever arquivos no HD üíæ
Esperar o usu√°rio clicar em algo ou terminar uma a√ß√£o ‚è≥
Essas opera√ß√µes podem demorar milissegundos, segundos ou at√© minutos.
Se o JavaScript fosse s√≠ncrono, ele congelaria a tela enquanto espera a resposta.
Com Promises (ou async/await), o JS diz:

‚ÄúBeleza, eu pedi a informa√ß√£o. Enquanto n√£o vem, vou continuar rodando o resto do c√≥digo. Quando estiver pronto, eu resolvo essa promessa.‚Äù */
// function execute() {
//     return new Promise((resolve, reject) => {
//         console.log('A promise est√° sendo executada.')
//         setTimeout(() => {
//             console.log('Resolvendo a promise...')
//             resolve('Resultado')
//         }, 3 * 1000) // espera 3 segundos
//     })
// }

// console.log(p) // aqui a promise ainda est√° "pendente"

// setTimeout(() => {
//     console.log(p) // aqui j√° est√° "resolvida"
// }, 5 * 1000)

// üëâ O que acontece aqui:
// Voc√™ chama execute().
// Isso retorna uma Promise pendente (pending).
// Depois de 3 segundos, o setTimeout chama resolve("Resultado").
// Agora a promessa vira resolvida (fulfilled).

/* Um cen√°rio muito comum √© que precisemos executar um c√≥digo assim que a promise for resolvida, e para isso usamos o m√©todo .then(). 
Ele nos permite definir justamente a fun√ß√£o ‚Äúresolve‚Äù da promise, ou seja, a fun√ß√£o que recebe o resultado como par√¢metro e √© chamada quando a 
promise √© bem sucedida: */

//S√£o como se fossem tratamentos de erros assim como try, catch e finally

function division (a, b){
    return new Promise((result, reject) => {
        console.log('A promise esta sendo executada...')
        setTimeout(()=> {
            if (isNaN(a) || isNaN(b)) {
                console.log('Erro na execu√ß√£o da promise...');
                reject('Ambas entradas precisam ser n√∫meros.');
            } if (b === 0) {
                console.log('Erro na execu√ß√£o da promise...');
                reject('Divis√£o por 0 n√£o e permitida!')
            } else {
                console.log(`Resolvendo a divis√£o...`);
                result(a / b);
            }
        }, 4 * 1000);
    })
}

/* Podemos ir encadeando uma fun√ß√£o na outra, afinal os m√©todos retornam a propria promise, o then serve para ser executado quando a promise da certo sem
nenhum erro, o catch para os erros e o finally apenas para finalizar */

division(10, 0).then((result) => {
    console.log(`Divis√£o concluida, resultado: ${result}.`);
}).catch((reject) => {
    console.log(`Erro na divis√£o, motivo: ${reject}`);
}).finally(() => {
    console.log('Todas as divis√µes foram encerradas.')
})